<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1"
    />

    <%/* If you want to discourage search engines from indexing this site,
    uncomment the following line: */%> <%/*
    <meta name="robots" content="noindex" />
    */%>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font@5.8.55/css/materialdesignicons.min.css">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="http://localhost:1337/">
          <img
            src="https://bulma.io/images/bulma-logo.png"
            width="112"
            height="28"
          />
        </a>
      </div>
      <div id="navbarBasicExample" class="navbar-menu is-active">
        <div class="navbar-start">
          <a class="navbar-item" href="http://localhost:1337/"> Home </a>
          <a class="navbar-item" href="http://localhost:1337/event/baginate"> Search </a>
          <a class="navbar-item" id="createeventbutton" href="http://localhost:1337/event/create"> Create </a>
          <a class="navbar-item" id="regeventbutton"href="http://localhost:1337/user/regevents"> My Registered Events </a>
          <a class="navbar-item" id="adminhomebutton"href="http://localhost:1337/admin/home"> Admin </a>
        </div>
      </div>
      <div class="navbar-end">
        <div class="navbar-item">
          <div class="buttons">
            <a class="button is-primary"id="loginlink" href="http://localhost:1337/user/login" >
              <strong id="loginbutton" ></strong>
            </a>
            <a class="button is-light" id="logoutbutton" href="http://localhost:1337/user/logout">
              Logout
            </a>
          </div>
        </div>
      </div>
    </nav>
    </div>
    <div class="box"style="background-color: #3c8ece">
      <p class="title is-5" style="color: white;">Event Management System</p>
<p class="subtitle is-6"style="color: white";>HKBU Event Management System is web-based system for department and
          student societies to broadcast events and activities as well as
          registration.</p>
    </div>

    <section class="section">
      <div class="container"><%- body %></div>
    </section>

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->

    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->

    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script defer src="https://use.fontawesome.com/releases/v5.10.0/js/all.js"></script>
    <script>
      const a = "<%= req.session.username%>";
      if (a) {document.getElementById("loginbutton").innerHTML= a;
      document.getElementById("loginlink").removeAttribute("href");}
      else{document.getElementById("loginbutton").innerHTML= "Login";
      document.getElementById("loginlink").href= "http://localhost:1337/user/login";}
      
      
      //check role
      const b = "<%= req.session.role%>";
      if ( b == "admin") {document.getElementById("regeventbutton").remove();}
      else if(b == "student")
      {document.getElementById("adminhomebutton").remove();
      document.getElementById("createeventbutton").remove();
    }
      else{
        document.getElementById("regeventbutton").remove();
        document.getElementById("adminhomebutton").remove();
        document.getElementById("createeventbutton").remove();
      }
      
    
    </script>
  </body>
</html>
